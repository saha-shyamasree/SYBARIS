#!/usr/bin/perl


my @in_files=glob("*_1.fastq.gz");
my $perl_code_path="/nfs/ma/home/shyama/code/SYBARIS/Perl/";
my $sam_path="/nfs/ma/home/shyama/installed_soft/samtools-0.1.18";
my $path_bowtie2="/nfs/ma/home/shyama/installed_soft/bowtie2-2.0.0-beta6/bowtie2";
my %index_list=('all'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/AF293/AF293",
                     'B07BNABXX_2_4'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/F8226/F8226",
                     'C023MABXX_3_8'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/F8226/F8226",
                     'D0ACKACXX_1_12'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/F4S9A/F4S9A",
                     'B07BNABXX_1_9'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/A1163/A1163",
                     'C023MABXX_5_2'=>"/nfs/ma/home/shyama/DATA/SYBARIS/Index/aspgd/A1163/A1163");
foreach my $in(@in_files)
{
  $in=~s/_1\.fastq\.gz//;
  pipeline($in);
}
#one single file will call all process programs for one pair. this code should sit on of that, so read all the files names and send to previously mentioned one.
sub fastqFilter
{
  my $base=shift;
  my $command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/filter_".$base.".txt -J ".$base."_filter \"perl ".$perl_code_path."fastq-filter-fixed_shyama.pl ".$base."_1.fastq.gz ".$base."_2.fastq.gz\"";
  print "\nfastqFilter: $command";
  system($command);
}

sub alignment
{
    my $base=shift;
    
    my $index=$index_list{all};
    if($index_list{$base})
    {
        $index=$index_list{$base};
    }
    
    my $command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/bowtie2".$base.".out -w \'done(\"".$base."_filter\")\' -J ".$base."_align -M 10000 -R \'rusage[mem=10000]\' \"".$path_bowtie2." -x ".$index." -1 ".$base."_1.fastq.gz -2 ".$base."_2.fastq.gz --un un-aligned/".$base.".fastq -S sam/".$base.".sam\"";
    print "\nalignment:$command";
    system($command);
    if($base=~m/B07BNABXX_1_9/ || $base=~m/C023MABXX_5_2/)
    {
        $index=$index_list{all};
        my $command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/bowtie2".$base."_AF293.out -w \'done(\"".$base."_filter\")\' -J ".$base."_AF293_align -M 10000 -R \'rusage[mem=10000]\' \"".$path_bowtie2." -x ".$index." -1 ".$base."_1.fastq.gz -2 ".$base."_2.fastq.gz --un un-aligned/".$base."_AF293.fastq -S sam/".$base."_AF293.sam\"";
        print "\nalignment,1_9/5_2:$command";
	system($command);
    }
}

sub separation
{
    my $base=shift;
    
    my $command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/".$base."unmapped.txt -w \'done(\"".$base."_align\")\' -J ".$base."_unmapped \"".$sam_path."./samtools view -f4 -t sam/".$base.".sam > unmapped/".$name.".sam\"";
    print "\nSeparation, Unmapped: $command";
    system($command);
    $command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/".$base."mapped.txt -w \'done(\"".$base."_align\")\' -J ".$base."_mapped \"".$sam_path."./samtools view -F4 -t sam/".$base.".sam > mapped/".$name.".sam\"";
    print "\nSeparation,Mapped: $command";
    system($command);
    if($base=~m/B07BNABXX_1_9/ || $base=~m/C023MABXX_5_2/)
    {
	$command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/".$base."unmapped.txt -w \'done(\"".$base."_AF293_align\")\' -J ".$base."_AF293_unmapped \"".$sam_path."./samtools view -f4 -t sam/".$base.".sam > unmapped/".$name.".sam\"";
	print "\nSeparation, Unmapped,1_9/5_2: $command";
	system($command);
	$command="bsub -o /nfs/ma/home/shyama/outputs/SYBARIS/".$base."mapped.txt -w \'done(\"".$base."_AF293_align\")\' -J ".$base."_AF293_mapped \"".$sam_path."./samtools view -F4 -t sam/".$base.".sam > mapped/".$name.".sam\"";
	print "\nSeparation, Mapped, 1_9/5_2: $command";
	system($command);
    }
}

sub contigsCreation
{
  
}

sub pipeline
{
    my $base=shift;
    $base=~s/_1\.fastq.gz//g;
    if(!(-d "bad"))
    {
      mkdir("bad");
    }

    if(!(-d "good"))
    {
      mkdir("good");
    }
    if(!(-d "sam"))
    {
        mkdir("sam");
    }
    
    if(!(-d "un-aligned"))
    {
        mkdir("un-aligned");
    }
    
    if(!(-d "bam"))
    {
        mkdir("bam");
    }
    
    if(!(-d "sorted"))
    {
        mkdir("sorted");
    }
    
    if(!(-d "unmapped"))
    {
        mkdir("unmapped");
    }
    
    if(!(-d "mapped"))
    {
        mkdir("mapped");
    }
    
    #fastq read filtering
    #fastqFilter($base);
    
    #alignment
    #alignment($base);

    #separating mapped and unmapped reads from bowtie2 output.
    separation($base);
}